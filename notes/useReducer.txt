types.js
--------

export const SEARCH_USERS = 'SEARCH_USERS'
export const GET_USER = 'GET_USER'




githubContext.js
----------------

import {createContext} from 'react'

const githubContext = createContext()

export default githubContext




githubReducer.js
----------------

import {SEARCH_USERS, SET_LOADING, CLEAR_USERS, GET_USER, GET_REPOS} from '../types'

export default (state, action) => {
    switch (action.type) {
        case SEARCH_USERS:
            return {
                ...state,
                users: action.payload,
                loading: false
            }

        default:
            return state
    }
}





githubState.js
--------------

import React, {useReducer} from 'react'
import GithubContext from './githubContext'
import GithubReducer from './githubReducer'
import {SEARCH_USERS, SET_LOADING, CLEAR_USERS, GET_USER, GET_REPOS} from '../types'

initialState = {users: [], ...}
const [state, dispatch] = useReducer(GithubReducer, initialState)

const searchUsers = async (text) => {
    setLoading()

    const res = await req(`search/users?q=${text}&`)

    dispatch({
        type: SEARCH_USERS,
        payload: res.data.items
    })
}

const setLoading = () => dispatch({type: SET_LOADING})

return (
    <GithubContext.Provider
        value={{
            users: state.users,
            ...
            searchUsers
        }}
    >
        {props.children}
    </GithubContext.Provider>
)




App.js
------

import GithubState from './context/github/GithubState'

<GithubState>
    ...
</GithubState>




Search.js
---------

import GithubContext from '../../context/github/githubContext'
const githubContext = useContext(GithubContext)

githubContext.searchUsers(text)
githubContext.users



you can use a HOOK for a fn that REQUESTS something which can be reused by components
to make it don't repeat you can use a REF for it


VERSION 2: 

in context/onlineEditor/ :

store.js:
---------
import React, {createContext, useContext, useReducer} from 'react'

const OnlineEditorContext = createContext(null)

export const OnlineEditorStoreProvider = (props) => {
    const initialState = {
        title: '',
        description: '',
        channels: {},
        views: [],
        variables: [],
        openDialogs: []
    }

    const [state, dispatch] = useReducer(OnlineEditorReducer, initialState)

    // dispatchers
    const loadTemplateData = () => {
        dispatch({
            type: LOAD_TEMPLATE_DATA
        })
    }

    ...

    return (
        <OnlineEditorContext.Provider
            value={{
                onlineEditorState: state,
                onlineEditorDispatch: {
                    loadTemplateData,
                    ...
                }
            }}
        >
            {props.children}
        </OnlineEditorContext.Provider>
    )
}

export const useOnlineEditorStore = () => useContext(OnlineEditorContext)
======================================


reducer.js:
-----------
import {LOAD_TEMPLATE_DATA, ...} from '../types'

const OnlineEditorReducer = (state, action) => {
    switch (action.type) {
        case LOAD_TEMPLATE_DATA:
            return {
                ...state,
                ...templateData
            }

        //case LOAD_CHANNELS:
        //    return {
        //        ...state,
        //       channels
        //        // recipeName: action.payload
        //    }

        default:
            return state
    }
}

export default OnlineEditorReducer
==================================


types.js:
---------
export const LOAD_TEMPLATE_DATA = 'LOAD_TEMPLATE_DATA'



wrap in the provider:
---------------------
<OnlineEditorStoreProvider>
    <ViewDialog open={open} close={close} />
    <EditDialog />
</OnlineEditorStoreProvider>



store usage in child components:
--------------------------------
import {useOnlineEditorStore} from '../context/onlineEditor/store'

const {onlineEditorState, onlineEditorDispatch} = useOnlineEditorStore()

onlineEditorDispatch.loadTemplateData()
onlineEditorState.title