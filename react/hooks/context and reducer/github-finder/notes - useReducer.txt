types.js
--------
    export const SEARCH_USERS = 'SEARCH_USERS'
    export const GET_USER = 'GET_USER'
    ...


App.js
------
<GithubState>
    ...
</GithubState>


githubState.js
--------------
    initialState = {users: [], ...}
    const [state, dispatch] = useReducer(GithubReducer, initialState)

    const searchUsers = async (text) => {
        setLoading()

        const res = await req(`search/users?q=${text}&`)

        dispatch({
            type: SEARCH_USERS,
            payload: res.data.items
        })
    }

    const setLoading = () => dispatch({type: SET_LOADING})

    return (
        <GithubContext.Provider
            value={{
                users: state.users,
                ...
                searchUsers
            }}
        >
            {props.children}
        </GithubContext.Provider>
    )


githubReducer.js
----------------
    switch (action.type) {
        case SEARCH_USERS:
            return {
                ...state,
                users: action.payload,
                loading: false
            },
            ...
        default:
            return state
    }


Search.js
---------
    import GithubContext from '../../context/github/githubContext'
    const githubContext = useContext(GithubContext)
    
    githubContext.searchUsers(text)
    githubContext.users