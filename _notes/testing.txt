SETUP:
1) create-react-app test
2) npm i --save-dev jest ajv enzyme jest-enzyme enzyme-adapter-react-16
3)
    import React from 'react';
    // import { render } from '@testing-library/react';
    import Enzyme, {shallow} from 'enzyme'
    import EnzymeAdapter from 'enzyme-adapter-react-16'
    import App from './App';

    // test('renders learn react link', () => {
    //   const { getByText } = render(<App />);
    //   const linkElement = getByText(/learn react/i);
    //   expect(linkElement).toBeInTheDocument();
    // });

    Enzyme.configure({adapter: new EnzymeAdapter()})

    test('renders without error', () => {
        const wrapper = shallow(<App />)
        const appComponent = wrapper.find('[data-test-id="component-app"]')
        expect(appComponent.length).toBe(1)
        //expect(wrapper).toBeTruthy()
    })



* the test PASSES if no errors are thrown
* BEHAVIOR should be tested, not the implementation
* we should not test external libs functionalities, but ours only

* remove App.test.js if it fails due to using routing

* some questions to ask yourself when thinking about what tests to write
    mostly test what are the crucial things that change depending on external influences
    what could i easilly break
    what could break my apps behavior
    does the reducer work correctly
    do we update our components correctly if the input changes
    do we fire the correct prop if we click a certain button

* show component's HTML: console.log(wrapper.debug())


// such code might be REPETATIVE but it's easier to understand on the fly:
const wrapper = setup()
const counterComponent = findByTestAttr(wrapper, 'component-click-counter')



BURGER APP:
//1
    npm install --save enzyme react-test-renderer enzyme-adapter-react-16

//2
    npm test

//3
    testing components: NavigationItems.test.js
    
     containers: changes in BurgerBuilder.js, plus BurgerBuilder.test.js
could use .setState() if they have state but aren't connected to a store
    
    reducers: auth.test.js
here we just test a normal js functions, no need of enzyme, react


    
JEST DOCS:
    #expect
    https://jestjs.io/docs/en/expect

    #mock (replace) - useful for testing async code


ENZYME DOCS
    https://airbnb.io/enzyme/docs/api/


jotto app (redux tests)
-----------------------
test()
shallow()
shallowWrapper.[update(), find()]
expect().[toBe(), .not.toBe(), .toContain()]
expect(action).toEqual({}) /kl/it's deep equal - should be used instead of .toBe() for objects 
component.[text(), .exists(), .length]
    .dive() -> returns the (non-DOM) React child component of the shallow wrapper
    .simulate(event)
checkPropTypes
setupTests.js in root folder - runs this before any test file
describe('', () => {}) - a way of grouping tests
createStore