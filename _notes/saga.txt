import { put, takeEvery, takeLatest, all, call } from 'redux-saga/effects'

const delay = (ms) => new Promise(res => setTimeout(res, ms))

// Our worker Saga: will perform the async increment task
function* incrementAsync() {
  yield call(delay, 1000) // => { CALL: {fn: delay, args: [1000]}} - allows TESTING (sagas.spec.js)
  yield put({ type: 'INCREMENT' }) // => { PUT: {type: 'INCREMENT'} }
}
// What happens is that the middleware examines the type of each yielded Effect then decides how to fulfill that Effect. If the Effect type is a PUT then it will dispatch an action to the Store. If the Effect is a CALL then it'll call the given function.

// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC
export function* watchIncrementAsync() {
  yield takeEvery('INCREMENT_ASYNC', incrementAsync)
}

// notice how we now only export the rootSaga
// single entry point to start all Sagas at once (the two resulting Generators will be started in parallel)
export default function* rootSaga() {
  yield all([
    //helloSaga(),
    watchIncrementAsync()
  ])
}


========================================

put - Effect. Effects are plain JavaScript objects which contain instructions to be fulfilled by the middleware. When a middleware retrieves an Effect yielded by a Saga, the Saga is paused until the Effect is fulfilled.


